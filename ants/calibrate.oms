
// Define the input variables
val gPopulation = Val[Double]
val gDiffusionRate = Val[Double]
val gEvaporationRate = Val[Double]
val seed = Val[Int]

// Define the output variables
val food1 = Val[Double]
val food2 = Val[Double]
val food3 = Val[Double]

// Define the NetlogoTask
val cmds = Seq("random-seed ${seed}", "run-to-grid")
val ants =
  NetLogo5Task(workDirectory / "ants.nlogo", cmds) set (
    // Map the OpenMOLE variables to NetLogo variables
    netLogoInputs += (gPopulation, "gpopulation"),
    netLogoInputs += (gDiffusionRate, "gdiffusion-rate"),
    netLogoInputs += (gEvaporationRate, "gevaporation-rate"),
    netLogoOutputs += ("final-ticks-food1", food1),
    netLogoOutputs += ("final-ticks-food2", food2),
    netLogoOutputs += ("final-ticks-food3", food3),
    gPopulation := 100,
    // The seed is used to control the initialisation of the random number generator of NetLogo
    inputs += seed
  )
  
val modelCapsule = Capsule(ants)

// Define the output variables
val medNumberFood1 = Val[Double]
val medNumberFood2 = Val[Double]
val medNumberFood3 = Val[Double]

// We compute three median
val statistic =
  StatisticTask() set (
    statistics += (food1, medNumberFood1, median),
    statistics += (food2, medNumberFood2, median),
    statistics += (food3, medNumberFood3, median)
  )

val statisticCapsule = Capsule(statistic)

val seedFactor = seed in (UniformDistribution[Int]() take 5)
val replicateModel = Replicate(modelCapsule, seedFactor, statisticCapsule)

// Define the population (10) and the number of generations (100).
// Define the inputs and their respective variation bounds.
// Define the objectives to minimize.
// Assign 1 percent of the computing time to reevaluating
// parameter settings to eliminate over-evaluated individuals.
val evolution =
  NSGA2(
    mu = 10,
    termination = 100,
    inputs = Seq(gDiffusionRate -> (0.0, 99.0), gEvaporationRate -> (0.0, 99.0)),
    objectives = Seq(medNumberFood1, medNumberFood2, medNumberFood3),
    reevaluate = 0.01
  )

// Define a builder to use NSGA2 generational EA algorithm.
// replicateModel is the fitness function to optimise.
// lambda is the size of the offspring (and the parallelism level).
val (puzzle, nsga2) =
  GenerationalGA(evolution)(
    replicateModel,
    lambda = 10
  )

// Define a hook to save the Pareto frontier
val savePopulationHook = SavePopulationHook(nsga2, workDirectory / "results")

// Define another hook to display the generation in the console
val display = DisplayHook("Generation ${" + nsga2.generation.name + "}")

val env = LocalEnvironment(5)

// Plug everything together to create the workflow
(puzzle hook savePopulationHook hook display) + (modelCapsule on env)
