//Parameters to tune for the Simulated Annealing (genotype of the NSGA2)
val T0 = Val[Double]          //Initiale temperature
val cexp = Val[Double]        //Coefficient for exponential decrease of temperature
val pas = Val[Double]         //Size of a step along x and y dimensions
val niter = Val[Double]       //Number of iteration of the algorithm

//In these two variables is catched the value of the Ackley function at the end of the algorithm
val strValue = Val[String]    //Output value as string
val doubleValue = Val[Double] //Output value as float

//These variables are use at the replication stage (phenotype of the NSGA2)
val VectorValue = Vec(doubleValue)
val meanValue = Val[Double]
val varValue = Val[Double]

//A seed have to be declared for the replication task, but we do not need it.
val seed = Val[Int]


//MODEL
val AckleyFunction =
  CARETask( workDirectory / "Ackley_SA.tgz.bin", "python Ackley_SA.py ${T0} ${cexp} ${pas} ${niter}") set (
    inputs += (T0, cexp, pas, niter),               //These inputs are the same as the inputs of the python script
    outputs += (T0, cexp, pas, niter, strValue),    //Only strValue is mandatory as output, the others are for debug
    
    stdOut := strValue,                             //Here we catch the python output as a string
    
    T0 := 0.1,                                      //Here are 4 defaults outputs for Debug
    cexp := 0.8,                                    //Defaults values allow you to run -> AckleyFunction hook ToStringHook()
    pas := 5.0,
    niter := 1000.0
)

//This scalaTask convert the string output of the CARETask in double
val toDouble = ScalaTask("val doubleValue = strValue.toDouble") set (
  inputs += strValue,
  outputs += doubleValue
)

//AckleyFunction -- toDouble hook ToStringHook() //Uncomment this line to test the CareTask and the conversion to float of the output

//Building the statistic tool
val meanAndVar = 
  ScalaTask("""val meanValue = doubleValue.average
               val varValue = doubleValue.meanSquaredError
            """) set (
    inputs += VectorValue,
    outputs += (meanValue, varValue)
  )

//Because of the way the SA algorithm works, the output of the CARETask is not deterministic.
//This is why we are going to optimize over statistical indicators, to get these we replicate each Task.
val replications = 
 Replication (
  evaluation = AckleyFunction -- toDouble hook ToStringHook(),
  seed = seed,
  replications = 50,
  aggregation = meanAndVar
)

//replications hook ToStringHook()  //Uncomment this line to test replication and aggregation

//Configuration of the genetic algorithm 
val nsga2 = NSGA2(
  mu = 50,  //Size of the population
  genome = Seq(T0 in (0.0, 3.0), cexp in (0.5, 1.0), pas in (0.1, 5.0), niter in (100.0, 10000.0)), //Space in which the population is sampled, values are rough estimations
  objectives = Seq(meanValue, varValue, niter)  //We want to optimize over three parameters
)

//Configuration of the workflow
val evolution = SteadyStateEvolution(
  algorithm = nsga2,
  evaluation = replications,
  parallelism = 10,
  termination = 2000
)

//A hook to save our work
val savePopulation = SavePopulationHook(evolution, workDirectory / "evolution/")

//A workflow must always be called
(evolution hook savePopulation on LocalEnvironment(2))

