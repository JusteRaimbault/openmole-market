val kFold  = Val[Int]
val images = Val[Array[File]]
val nbTrees   = Val[Int]
val treeDepth = Val[Int]
  
val parameterExploration = 
  ExplorationTask(
  (nbTrees in (5 to 25 by 5)) x
  (treeDepth in (5 to 21 by 3))
  )
  
val imagesExploration = 
  ExplorationTask(
   (kFold in (0 until 10)) x
   (images is ListFilesDomain(inputDirectory, filter = ".*\\.jpg").shuffle)) set (
    inputs += (nbTrees, treeDepth),
    outputs += (nbTrees, treeDepth)
  )
  
val dummyLearning = 
  ScalaTask("""println(s"${images.head} $nbTrees $treeDepth")""") set ( 
    name := "learning",
    inputs += (nbTrees, treeDepth),
    inputFileArrays += (images, "images/image", ".jpg", link = true) 
  )

val accuracy = Val[String]
val learning = SystemExecTask(
  "./archive_python2.bin",
  "archive_python2/re-execute.sh python forest.py /home/jopasserat/Downloads/images ${nbTrees} ${treeDepth}"
) set (
  inputs += (nbTrees, treeDepth),
  resources += archiveLocation,
  inputFileArrays += (images, "archive_python2/rootfs/home/jopasserat/Downloads/images/image", ".jpg", link = true),
  stdOut := accuracy,
  outputs += (nbTrees, treeDepth)
)

val resultsFile = Val[File]
val h = AppendToCSVFileHook("/tmp/accuracy.csv", nbTrees, treeDepth, accuracy)

val slurm =
SLURMEnvironment(
  "jpassera",
  "predict5.doc.ic.ac.uk",
  queue="short"
)

(parameterExploration -< imagesExploration -< (learning hook h)) start

